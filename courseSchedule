//https://leetcode.com/problems/course-schedule/
class Node{
    ArrayList<Integer> l;
    int p;
    Node(){
        l=new ArrayList<>();
        p=0;
    }
}
class Solution {
    boolean cycleDetection(Node[] graph, int start, HashSet<Integer> h){
        Stack<Integer> stack=new Stack<>();
        HashSet<Integer> track=new HashSet<>();
        stack.push(start);
        track.add(start);
        h.add(start);

        while(stack.isEmpty()==false) {
            Node n=graph[stack.peek()];
            if (n.l.size()==n.p) {
                track.remove(stack.pop());
            }
            else{
                while(n.p<n.l.size()) {
                    int x=n.l.get(n.p);
                    if (track.contains(x)) return true;

                    if (h.contains(x)==false){
                        stack.push(x);
                        track.add(x);
                        h.add(x);
                        break;
                    } n.p++;
                    
                }
            }
        }
        return false;
    }
    public boolean canFinish(int numCourses, int[][] pre) {
        Node[] graph=new Node[numCourses];
        for (int i=0;i<numCourses;i++){
            graph[i]=new Node();
        }
        for (int i=0;i<pre.length;i++){
            graph[pre[i][0]].l.add(pre[i][1]);
        }
        HashSet<Integer> h=new HashSet<>();
        //looping over all nodes is needed because disjoint nature of problem.
        for (int i=0;i<numCourses;i++){
            if (h.contains(i)==false){
                if (cycleDetection(graph,i,h)) return false;
            }
        }
        return true;
    }
}
