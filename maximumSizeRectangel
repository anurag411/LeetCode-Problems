class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) 
            return 0;
        
        int maxArea = 0;
        int a[] = new int[matrix[0].length];
        
        for(int i=0;i<matrix.length;i++) {
            for(int j=0;j<matrix[0].length;j++) {
                if(matrix[i][j]-48 == 0)
                    a[j] = matrix[i][j]-48;
                else                     
                    a[j] =  a[j] + matrix[i][j]-48;
            }  
            maxArea = Math.max(maxArea, maxAreaHistogram(a));
        }
       return maxArea;
    }
    
    public int maxAreaHistogram(int a[]) {
        int max=0;
        int area=0;
        Stack<Integer> stack =new Stack<Integer>();
        int i=0;
        int n=a.length;
        while(i<n) {
            if(stack.isEmpty() || a[stack.peek()]<=a[i]) {
                stack.push(i);
                i++;
            } else {
                int top=stack.pop();
                if(stack.isEmpty()) {
                    area=a[top]*(i);
                } else {
                    area=a[top]*(i-1-stack.peek());
                } 
                if(area>max) {
                    max=area;
                }
            }
        }
        
        while(!stack.isEmpty()) {
            int top=stack.pop();
            if(stack.isEmpty()) {
                area=a[top]*(i);
            } else {
                area=a[top]*(i-1-stack.peek());
            } if(area>max) {
                max=area;
            }
        }
        return max;
    }
}
