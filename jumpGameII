// my solution and efficient solution in comments below
// https://leetcode.com/problems/jump-game-ii
class Solution {
    public int jump(int[] nums) {
        if (nums.length <= 1) {         
            return 0;     
        }
        Stack<Integer> stack = new Stack<>();
        int maxJump = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i <= maxJump) {
                if(maxJump < i+nums[i]) {
                    maxJump = i + nums[i];
                    int temp = -1;
                    while(!stack.isEmpty()) {
                        if(stack.peek()+nums[stack.peek()] > i) {
                            temp = stack.pop();
                            if(stack.isEmpty()) {
                                stack.push(temp);
                                break;
                            }
                            count--;
                        } else if(stack.peek()+nums[stack.peek()] == i) {
                            break;
                        } else {
                            if(temp > -1) {
                                count++;
                                stack.push(temp);
                            }
                            break;
                        }
                    }
                    if(stack.isEmpty() && temp > -1){                        
                        stack.push(temp);
                        count++;
                    }
                    stack.push(i);
                    count = count+1;                       
                }                
            } 
            if(maxJump >= nums.length-1)
                return count;
        }
        return -1;
    }
}

/*
public int jump(int[] nums) {
	int n = nums.length, jumps = 1, next = nums[0], max= nums[0];
	if(n <= 1) return 0;
	int i = 1;
	for(; i < n; i++){
		max = Math.max(max, i + nums[i]);
		//reached till next, time to set new next
		if(i == next && i != n - 1){
			next = max;
			if(next == i) return -1;
			jumps++;
		}
	}
	return jumps;

*/
